/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.cnr.istc.icv.test.tdeditor;


import it.cnr.istc.icv.engine.listeners.PopupMenuTriggerListener;
import it.cnr.istc.icv.engine.tdelogic.Event;
import it.cnr.istc.icv.logic.ICVAnnotation;
import it.cnr.istc.icv.logic.ICVMappableAnnotation;
import it.cnr.istc.icv.logic.ICVQuestionAnnotation;
import it.cnr.istc.icv.logic.ICVYesNotQuestionAnnotation;
import it.cnr.istc.icv.engine.tdelogic.pst.ICVBooleanStateCondition;
import it.cnr.istc.icv.extra.test.SensorTester;
import it.cnr.istc.icv.test.ActivityContainerSupporter;
import java.awt.Color;
import java.beans.Beans;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

/**
 *
 * @author Luca
 */
public class TherapyTemplateEditorPanel extends javax.swing.JPanel implements PopupMenuTriggerListener {

    private long defaultStartDate;
    private ICVMappableAnnotation selectedAnnotation = null;
    private String selectedAnswer = null;
    /**
     * Creates new form TherapyTemplateEditorPanel
     */
    public TherapyTemplateEditorPanel() {
        initComponents();
        if (!Beans.isDesignTime()) {
            this.veryDroppablePanel1.getMixedPanel().addPopupMenuTriggerListener(this);
        }
        this.veryDroppablePanel1.getMixedPanel().setStartRange(new Date().getTime()-1000*60*60);
        this.veryDroppablePanel1.getMixedPanel().setEndRange(new Date().getTime()+1000*60*60*24);
        this.defaultStartDate = this.veryDroppablePanel1.getMixedPanel().getStartRange();
//        this.veryDroppablePanel1.getMixedPanel().addDataBar(new ActivityContainerSupporter(""));
//        this.veryDroppablePanel1.getMixedPanel().addDataBar(new ActivityContainerSupporter("Status: Available"));
//        this.veryDroppablePanel1.getMixedPanel().addDataBar(new ActivityContainerSupporter("Status: Last Alarm"));
//        this.veryDroppablePanel1.getMixedPanel().addDataBar(new ActivityContainerSupporter("Status: B"));
//        this.veryDroppablePanel1.getMixedPanel().addDataBar(new ActivityContainerSupporter("Status: C"));
        this.veryDroppablePanel1.getMixedPanel().addDataBar(new ActivityContainerSupporter("Status"));
        this.veryDroppablePanel1.getMixedPanel().addDataBar(new ActivityContainerSupporter("Question"));
        this.veryDroppablePanel1.getMixedPanel().addDataBar(new ActivityContainerSupporter("Reminder"));
        this.veryDroppablePanel1.getMixedPanel().addDataBar(new ActivityContainerSupporter("Email"));
//        this.veryDroppablePanel1.getMixedPanel().setArrowHeaderMode(true);
        this.veryDroppablePanel1.getMixedPanel().setNightVisible(false);
        this.veryDroppablePanel1.getMixedPanel().setZoomEnable(false);
        this.veryDroppablePanel1.getMixedPanel().setAnnotationDraggable(this.jCheckBox1.isSelected());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu_addStartEvent = new javax.swing.JPopupMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_addQuestion = new javax.swing.JMenuItem();
        jMenuItem_addReminder = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem_addStatus_Green1 = new javax.swing.JMenuItem();
        jMenuItem_addStatusYellow1 = new javax.swing.JMenuItem();
        jMenuItem_addStatus_Red1 = new javax.swing.JMenuItem();
        jPopupMenu_addConsequence = new javax.swing.JPopupMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem_addQuestion1 = new javax.swing.JMenuItem();
        jMenuItem_addReminder1 = new javax.swing.JMenuItem();
        jMenuItem_addEmail1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem_addStatus_Green = new javax.swing.JMenuItem();
        jMenuItem_addStatusYellow = new javax.swing.JMenuItem();
        jMenuItem_addStatus_Red = new javax.swing.JMenuItem();
        jMenuItem_remove = new javax.swing.JMenuItem();
        jPopupMenu_addAnswerConsequence = new javax.swing.JPopupMenu();
        jToolBar1 = new javax.swing.JToolBar();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        veryDroppablePanel1 = new it.cnr.istc.icv.engine.EmbeddablePanel();

        jMenu1.setText("add start event");

        jMenuItem_addQuestion.setText("add Question");
        jMenuItem_addQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addQuestionActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_addQuestion);

        jMenuItem_addReminder.setText("add Reminder");
        jMenuItem_addReminder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addReminderActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_addReminder);

        jMenu4.setText("add Status");

        jMenuItem_addStatus_Green1.setText("OK");
        jMenuItem_addStatus_Green1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addStatus_Green1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem_addStatus_Green1);

        jMenuItem_addStatusYellow1.setText("WARNING");
        jMenuItem_addStatusYellow1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addStatusYellow1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem_addStatusYellow1);

        jMenuItem_addStatus_Red1.setText("DANGER");
        jMenuItem_addStatus_Red1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addStatus_Red1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem_addStatus_Red1);

        jMenu1.add(jMenu4);

        jPopupMenu_addStartEvent.add(jMenu1);

        jMenu2.setText("add consequence");

        jMenuItem_addQuestion1.setText("add Question");
        jMenuItem_addQuestion1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addQuestion1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem_addQuestion1);

        jMenuItem_addReminder1.setText("add Reminder");
        jMenuItem_addReminder1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addReminder1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem_addReminder1);

        jMenuItem_addEmail1.setText("add Email");
        jMenuItem_addEmail1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addEmail1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem_addEmail1);

        jMenu3.setText("add Status Effect");

        jMenuItem_addStatus_Green.setText("OK");
        jMenuItem_addStatus_Green.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addStatus_GreenActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem_addStatus_Green);

        jMenuItem_addStatusYellow.setText("WARNING");
        jMenuItem_addStatusYellow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addStatusYellowActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem_addStatusYellow);

        jMenuItem_addStatus_Red.setText("DANGER");
        jMenuItem_addStatus_Red.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addStatus_RedActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem_addStatus_Red);

        jMenu2.add(jMenu3);

        jPopupMenu_addConsequence.add(jMenu2);

        jMenuItem_remove.setText("remove action");
        jMenuItem_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_removeActionPerformed(evt);
            }
        });
        jPopupMenu_addConsequence.add(jMenuItem_remove);

        jToolBar1.setRollover(true);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("D&D");
        jCheckBox1.setFocusable(false);
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jCheckBox1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jCheckBox1);

        jCheckBox2.setText("Zoom");
        jCheckBox2.setFocusable(false);
        jCheckBox2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jCheckBox2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jCheckBox2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
            .addComponent(veryDroppablePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(veryDroppablePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_addQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addQuestionActionPerformed
        this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(new ICVYesNotQuestionAnnotation("main", "Question", defaultStartDate+1000*60*60, "Stai bene ?", ((ImageIcon)SensorTester.question).getImage(), true));
        Event event = new Event("main", "Q1", "Stai bene ?", 0, false, 0, null, null, null);
        this.veryDroppablePanel1.getMixedPanel().setMainEvent(event);
    }//GEN-LAST:event_jMenuItem_addQuestionActionPerformed

    private void jMenuItem_addQuestion1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addQuestion1ActionPerformed
        long when = this.selectedAnnotation.getWhen();
        String id =""+new Date().getTime();
        if (selectedAnnotation instanceof ICVQuestionAnnotation) {
            ICVQuestionAnnotation cons = new ICVQuestionAnnotation(id, "Question", when + 1000 * 60 * 60, "Ricordati di te", ((ImageIcon) SensorTester.question).getImage(), true);
            cons.addPossibleAnswer("Si sto bene");
            cons.addPossibleAnswer("Insomma");
            cons.addPossibleAnswer("Non lo so");
            cons.setParentQuestion((ICVQuestionAnnotation) selectedAnnotation);
            cons.setTriggerText(this.selectedAnswer);
            try {
                ((ICVQuestionAnnotation) selectedAnnotation).addICVAnswerForTrigger(this.selectedAnswer, cons);
            } catch (Exception ex) {
                Logger.getLogger(TherapyTemplateEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(cons);
            Event event = new Event(id, "E1", "Ricordati di te", 0, false, 0, null, null, null);
            this.veryDroppablePanel1.getMixedPanel().getMainEvent().addConsequence(event); //NO BUONO       
            if (this.selectedAnswer.equals(ICVQuestionAnnotation.DEFAULT_NO)) {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons, Color.RED);
            } else if (this.selectedAnswer.equals(ICVQuestionAnnotation.DEFAULT_YES)) {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons, new Color(4, 201, 86));
            } else {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons);
            }
            this.veryDroppablePanel1.getMixedPanel().repaint();

        } else {
        ICVQuestionAnnotation cons = new ICVQuestionAnnotation(id, "Question", when+1000*60*60, "Ricordati di te", ((ImageIcon)SensorTester.question).getImage(), true);
        cons.addPossibleAnswer("Si sto bene");
        cons.addPossibleAnswer("Insomma");
        cons.addPossibleAnswer("Non lo so");
        this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(cons);
        Event event = new Event(id, "Q1", "sei vivo??", 0, false, 0, null, null, null);
        this.veryDroppablePanel1.getMixedPanel().getMainEvent().addConsequence(event); //NO BUONO
        this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons);
        this.veryDroppablePanel1.getMixedPanel().repaint();
        }
    }//GEN-LAST:event_jMenuItem_addQuestion1ActionPerformed

    private void jMenuItem_addReminder1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addReminder1ActionPerformed
        long when = this.selectedAnnotation.getWhen();
        String id = "" + new Date().getTime();
        if (selectedAnnotation instanceof ICVQuestionAnnotation) {
            ICVMappableAnnotation cons = new ICVMappableAnnotation(id, "Reminder", when + 1000 * 60 * 60, "Ricordati di te", ((ImageIcon) SensorTester.reminder).getImage(), true);
            cons.setParentQuestion((ICVQuestionAnnotation) selectedAnnotation);
            cons.setTriggerText(this.selectedAnswer);
            try {
                ((ICVQuestionAnnotation) selectedAnnotation).addICVAnswerForTrigger(this.selectedAnswer, cons);
            } catch (Exception ex) {
                Logger.getLogger(TherapyTemplateEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(cons);
            Event event = new Event(id, "E1", "Ricordati di te", 0, false, 0, null, null, null);
            this.veryDroppablePanel1.getMixedPanel().getMainEvent().addConsequence(event); //NO BUONO       
            if (this.selectedAnswer.equals(ICVQuestionAnnotation.DEFAULT_NO)) {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons, Color.RED);
            } else if (this.selectedAnswer.equals(ICVQuestionAnnotation.DEFAULT_YES)) {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons, new Color(4, 201, 86));
            } else {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons);
            }
            this.veryDroppablePanel1.getMixedPanel().repaint();

        } else {
            ICVMappableAnnotation cons = new ICVMappableAnnotation(id, "Reminder", when + 1000 * 60 * 60, "Ricordati di te", ((ImageIcon) SensorTester.reminder).getImage(), true);
            cons.addCondition(new ICVBooleanStateCondition(false, "PU is Available","PU is Not Available"));
            cons.addCondition(new ICVBooleanStateCondition(false, "is Night","is Not Night"));
            cons.addCondition(new ICVBooleanStateCondition(true, "is Male","is Female"));
            
            this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(cons);
            Event event = new Event(id, "Q1", "Come stai? ", 0, false, 0, null, null, null);
            this.veryDroppablePanel1.getMixedPanel().getMainEvent().addConsequence(event); //NO BUONO
            this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons);
            this.veryDroppablePanel1.getMixedPanel().repaint();
        }
    }//GEN-LAST:event_jMenuItem_addReminder1ActionPerformed

    private void jMenuItem_addEmail1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addEmail1ActionPerformed
        long when = this.selectedAnnotation.getWhen();
        String id = "" + System.currentTimeMillis();
        if (selectedAnnotation instanceof ICVQuestionAnnotation) {
            ICVMappableAnnotation cons = new ICVMappableAnnotation(id, "Email", when + 1000 * 60 * 60, "Siete stati avvisati..", ((ImageIcon) SensorTester.mail).getImage(), true);
            cons.setParentQuestion((ICVQuestionAnnotation)selectedAnnotation);
            cons.setTriggerText(this.selectedAnswer);
            try {
                ((ICVQuestionAnnotation)selectedAnnotation).addICVAnswerForTrigger(this.selectedAnswer, cons);
            } catch (Exception ex) {
                Logger.getLogger(TherapyTemplateEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(cons);
            Event event = new Event(id, "E1", "Siete stati avvisati ", 0, false, 0, null, null, null);
            this.veryDroppablePanel1.getMixedPanel().getMainEvent().addConsequence(event); //NO BUONO       
            if(this.selectedAnswer.equals(ICVQuestionAnnotation.DEFAULT_NO)){
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons,Color.RED);
            }else if(this.selectedAnswer.equals(ICVQuestionAnnotation.DEFAULT_YES)){
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons,new Color(4,201,86));
            }else{
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons);
            }
            this.veryDroppablePanel1.getMixedPanel().repaint();
            
        } else {
            ICVMappableAnnotation cons = new ICVMappableAnnotation(id, "Email", when + 1000 * 60 * 60, "Siete stati avvisati..", ((ImageIcon) SensorTester.mail).getImage(), true);
            cons.addCondition(new ICVBooleanStateCondition(false, "PU is Available","PU is Not Available"));
            cons.addCondition(new ICVBooleanStateCondition(false, "is Night","is Not Night"));
            this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(cons);
            Event event = new Event(id, "E1", "Siete stati avvisati ", 0, false, 0, null, null, null);
            this.veryDroppablePanel1.getMixedPanel().getMainEvent().addConsequence(event); //NO BUONO        
            this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons);
            this.veryDroppablePanel1.getMixedPanel().repaint();
        }
    }//GEN-LAST:event_jMenuItem_addEmail1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        this.veryDroppablePanel1.getMixedPanel().setAnnotationDraggable(this.jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        this.veryDroppablePanel1.getMixedPanel().setZoomEnable(this.jCheckBox2.isSelected());
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jMenuItem_addStatus_GreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addStatus_GreenActionPerformed
        long when = this.selectedAnnotation.getWhen();
        String id =""+System.currentTimeMillis();
        if (selectedAnnotation instanceof ICVQuestionAnnotation) {
            ICVMappableAnnotation cons = new ICVMappableAnnotation(id, "Status", when + 1000 * 60 * 60, "OK", ((ImageIcon) SensorTester.green).getImage(), true);
            cons.setParentQuestion((ICVQuestionAnnotation) selectedAnnotation);
            cons.setTriggerText(this.selectedAnswer);
            try {
                ((ICVQuestionAnnotation) selectedAnnotation).addICVAnswerForTrigger(this.selectedAnswer, cons);
            } catch (Exception ex) {
                Logger.getLogger(TherapyTemplateEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(cons);
            Event event = new Event(id, "E1", "Status", 0, false, 0, null, null, null);
            this.veryDroppablePanel1.getMixedPanel().getMainEvent().addConsequence(event); //NO BUONO       
            if (this.selectedAnswer.equals(ICVQuestionAnnotation.DEFAULT_NO)) {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons, Color.RED);
            } else if (this.selectedAnswer.equals(ICVQuestionAnnotation.DEFAULT_YES)) {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons, new Color(4, 201, 86));
            } else {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons);
            }
            this.veryDroppablePanel1.getMixedPanel().repaint();

        } else {
            ICVMappableAnnotation cons = new ICVMappableAnnotation(id, "Status", when + 1000 * 60 * 60, "OK", ((ImageIcon) SensorTester.green).getImage(), true);
            this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(cons);
            Event event = new Event(id, "E1", "OK", 0, false, 0, null, null, null);
            this.veryDroppablePanel1.getMixedPanel().getMainEvent().addConsequence(event); //NO BUONO
            this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons);
            this.veryDroppablePanel1.getMixedPanel().repaint();
        }
    }//GEN-LAST:event_jMenuItem_addStatus_GreenActionPerformed

    private void jMenuItem_addStatus_RedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addStatus_RedActionPerformed
        long when = this.selectedAnnotation.getWhen();
        String id =""+System.currentTimeMillis();
        if (selectedAnnotation instanceof ICVQuestionAnnotation) {
            ICVMappableAnnotation cons = new ICVMappableAnnotation(id, "Status", when+1000*60*60, "DANGER!", ((ImageIcon)SensorTester.red).getImage(), true);
            cons.setParentQuestion((ICVQuestionAnnotation) selectedAnnotation);
            cons.setTriggerText(this.selectedAnswer);
            try {
                ((ICVQuestionAnnotation) selectedAnnotation).addICVAnswerForTrigger(this.selectedAnswer, cons);
            } catch (Exception ex) {
                Logger.getLogger(TherapyTemplateEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(cons);
            Event event = new Event(id, "E1", "Status", 0, false, 0, null, null, null);
            this.veryDroppablePanel1.getMixedPanel().getMainEvent().addConsequence(event); //NO BUONO       
            if (this.selectedAnswer.equals(ICVQuestionAnnotation.DEFAULT_NO)) {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons, Color.RED);
            } else if (this.selectedAnswer.equals(ICVQuestionAnnotation.DEFAULT_YES)) {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons, new Color(4, 201, 86));
            } else {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons);
            }
            this.veryDroppablePanel1.getMixedPanel().repaint();

        } else {
        ICVMappableAnnotation cons = new ICVMappableAnnotation(id, "Status", when+1000*60*60, "DANGER!", ((ImageIcon)SensorTester.red).getImage(), true);
        this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(cons);
        Event event = new Event(id, "E1", "DANGER!", 0, false, 0, null, null, null);
        this.veryDroppablePanel1.getMixedPanel().getMainEvent().addConsequence(event); //NO BUONO
        this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons);
        this.veryDroppablePanel1.getMixedPanel().repaint();
        }
    }//GEN-LAST:event_jMenuItem_addStatus_RedActionPerformed

    private void jMenuItem_addStatusYellowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addStatusYellowActionPerformed
       long when = this.selectedAnnotation.getWhen();
        String id =""+System.currentTimeMillis();
        if (selectedAnnotation instanceof ICVQuestionAnnotation) {
            ICVMappableAnnotation cons = new ICVMappableAnnotation(id, "Status", when+1000*60*60, "WARNING", ((ImageIcon)SensorTester.yellow).getImage(), true);
            cons.setParentQuestion((ICVQuestionAnnotation) selectedAnnotation);
            cons.setTriggerText(this.selectedAnswer);
            try {
                ((ICVQuestionAnnotation) selectedAnnotation).addICVAnswerForTrigger(this.selectedAnswer, cons);
            } catch (Exception ex) {
                Logger.getLogger(TherapyTemplateEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(cons);
            Event event = new Event(id, "E1", "Status", 0, false, 0, null, null, null);
            this.veryDroppablePanel1.getMixedPanel().getMainEvent().addConsequence(event); //NO BUONO       
            if (this.selectedAnswer.equals(ICVQuestionAnnotation.DEFAULT_NO)) {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons, Color.RED);
            } else if (this.selectedAnswer.equals(ICVQuestionAnnotation.DEFAULT_YES)) {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons, new Color(4, 201, 86));
            } else {
                this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons);
            }
            this.veryDroppablePanel1.getMixedPanel().repaint();            

        } else {
        ICVMappableAnnotation cons = new ICVMappableAnnotation(id, "Status", when+1000*60*60, "WARNING", ((ImageIcon)SensorTester.yellow).getImage(), true);
        this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(cons);
        Event event = new Event(id, "E1", "WARNING", 0, false, 0, null, null, null);
        this.veryDroppablePanel1.getMixedPanel().getMainEvent().addConsequence(event); //NO BUONO
        this.veryDroppablePanel1.getMixedPanel().linkAnnotations(selectedAnnotation, cons);
        this.veryDroppablePanel1.getMixedPanel().repaint();
        }
    }//GEN-LAST:event_jMenuItem_addStatusYellowActionPerformed

    private void jMenuItem_addStatus_Green1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addStatus_Green1ActionPerformed
        this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(new ICVMappableAnnotation("main", "Status", defaultStartDate+1000*60*60, "OK", ((ImageIcon)SensorTester.green).getImage(), true));
        Event event = new Event("main", "Q1", "OK", 0, false, 0, null, null, null);
        this.veryDroppablePanel1.getMixedPanel().setMainEvent(event);
    }//GEN-LAST:event_jMenuItem_addStatus_Green1ActionPerformed

    private void jMenuItem_addStatusYellow1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addStatusYellow1ActionPerformed
       this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(new ICVMappableAnnotation("main", "Status", defaultStartDate+1000*60*60, "WARNING", ((ImageIcon)SensorTester.yellow).getImage(), true));
        Event event = new Event("main", "Q1", "WARNING", 0, false, 0, null, null, null);
        this.veryDroppablePanel1.getMixedPanel().setMainEvent(event);
    }//GEN-LAST:event_jMenuItem_addStatusYellow1ActionPerformed

    private void jMenuItem_addStatus_Red1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addStatus_Red1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem_addStatus_Red1ActionPerformed

    private void jMenuItem_addReminderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addReminderActionPerformed
        this.veryDroppablePanel1.getMixedPanel().addICVAnnotation(new ICVMappableAnnotation("main", "Reminder", defaultStartDate+1000*60*60, "Ti voglio un po' bene", ((ImageIcon)SensorTester.reminder).getImage(), true));
        Event event = new Event("main", "Q1", "Come stai? ", 0, false, 0, null, null, null);
        this.veryDroppablePanel1.getMixedPanel().setMainEvent(event);
    }//GEN-LAST:event_jMenuItem_addReminderActionPerformed

    private void jMenuItem_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_removeActionPerformed
        this.veryDroppablePanel1.getMixedPanel().unlinkOnCascade(selectedAnnotation);
//        this.veryDroppablePanel1.getMixedPanel().unlinkAnnotations(selectedAnnotation.getParent(), selectedAnnotation);
        selectedAnnotation = null;
        this.veryDroppablePanel1.getMixedPanel().repaint();
    }//GEN-LAST:event_jMenuItem_removeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuItem jMenuItem_addEmail1;
    private javax.swing.JMenuItem jMenuItem_addQuestion;
    private javax.swing.JMenuItem jMenuItem_addQuestion1;
    private javax.swing.JMenuItem jMenuItem_addReminder;
    private javax.swing.JMenuItem jMenuItem_addReminder1;
    private javax.swing.JMenuItem jMenuItem_addStatusYellow;
    private javax.swing.JMenuItem jMenuItem_addStatusYellow1;
    private javax.swing.JMenuItem jMenuItem_addStatus_Green;
    private javax.swing.JMenuItem jMenuItem_addStatus_Green1;
    private javax.swing.JMenuItem jMenuItem_addStatus_Red;
    private javax.swing.JMenuItem jMenuItem_addStatus_Red1;
    private javax.swing.JMenuItem jMenuItem_remove;
    private javax.swing.JPopupMenu jPopupMenu_addAnswerConsequence;
    private javax.swing.JPopupMenu jPopupMenu_addConsequence;
    private javax.swing.JPopupMenu jPopupMenu_addStartEvent;
    private javax.swing.JToolBar jToolBar1;
    private it.cnr.istc.icv.engine.EmbeddablePanel veryDroppablePanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void rightClickTriggered(String databar, Date timeValue, int pointX, int pointY) {
        if(this.veryDroppablePanel1.getMixedPanel().getMainEvent() == null){
            
            jPopupMenu_addStartEvent.show(this, this.getMousePosition().getLocation().x,this.getMousePosition().getLocation().y);
        }
    }

    @Override
    public void rightClickAreaTriggered(String databar, ICVAnnotation annotation, Date timeValue, int pointX, int pointY) {
        if(this.veryDroppablePanel1.getMixedPanel().getMainEvent() != null){
            if(annotation instanceof ICVQuestionAnnotation){
                this.selectedAnnotation = (ICVQuestionAnnotation)annotation;
                
                List<String> possibleAnswers = ((ICVQuestionAnnotation)annotation).getPossibleAnswers();
                JPopupMenu popup = new JPopupMenu();
                for (String ans : possibleAnswers) {
                    JMenu addCMenu = new AnswerConsequenceMenuItem(ans);
                    popup.add(addCMenu);
                }
                popup.show(this, this.getMousePosition().getLocation().x,this.getMousePosition().getLocation().y);
                
            }
            else if(annotation instanceof ICVMappableAnnotation){
                this.selectedAnnotation = (ICVMappableAnnotation)annotation;
                jPopupMenu_addConsequence.show(this, this.getMousePosition().getLocation().x,this.getMousePosition().getLocation().y);
                
                
            }
        }
        
    }

    public class AnswerConsequenceMenuItem extends JMenu {
        
        public static final String baseMenuText = "<html>add consequence for answer: ";

        private String forAnswer; //the corresponding parent's answer

        public AnswerConsequenceMenuItem(String forAnswer) {
            super(baseMenuText + "<b>"+forAnswer+"</b>");
            this.forAnswer = forAnswer;
            JMenuItem addQuestion = new JMenuItem("add Question");
            addQuestion.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    selectedAnswer = AnswerConsequenceMenuItem.this.forAnswer;
                    jMenuItem_addQuestion1ActionPerformed(evt);
                    selectedAnswer = null;
                }
            });
            JMenuItem addEmail = new JMenuItem("add Email");
            addEmail.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    selectedAnswer = AnswerConsequenceMenuItem.this.forAnswer;
                    jMenuItem_addEmail1ActionPerformed(evt);
                    selectedAnswer = null;
                }
            });
            JMenuItem addReminder = new JMenuItem("add Reminder");
            addReminder.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    selectedAnswer = AnswerConsequenceMenuItem.this.forAnswer;
                    jMenuItem_addReminder1ActionPerformed(evt);
                    selectedAnswer = null;
                }
            });
            JMenu statusMenu = new JMenu("add Status Change");
            JMenuItem addGreenStatus = new JMenuItem("add Green Status");
            addGreenStatus.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    selectedAnswer = AnswerConsequenceMenuItem.this.forAnswer;
                    jMenuItem_addStatus_GreenActionPerformed(evt);
                    selectedAnswer = null;
                }
            });
            JMenuItem addYellowStatus = new JMenuItem("add Yellow Status");
            addYellowStatus.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    selectedAnswer = AnswerConsequenceMenuItem.this.forAnswer;
                    jMenuItem_addStatusYellowActionPerformed(evt);
                    selectedAnswer = null;
                }
            });
            JMenuItem addRedStatus = new JMenuItem("add Red Status");
            addRedStatus.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    selectedAnswer = AnswerConsequenceMenuItem.this.forAnswer;
                    jMenuItem_addStatus_RedActionPerformed(evt);
                    selectedAnswer = null;
                }
            });
            statusMenu.add(addGreenStatus);
            statusMenu.add(addYellowStatus);
            statusMenu.add(addRedStatus);
            
            this.add(addQuestion);
            this.add(addReminder);
            this.add(addEmail);
            this.add(statusMenu);
            
        }

        public void setForAnswer(String forAnswer) {
            this.forAnswer = forAnswer;
        }

        public String getForAnswer() {
            return forAnswer;
        }

    }
}
